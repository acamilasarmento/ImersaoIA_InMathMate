# -*- coding: utf-8 -*-
"""Projeto InMathMate 3.0.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/19uAhJJ7kWR1t1-GohNZCj7wrPRh162KW
"""

# C√©lula 1: Instala√ß√£o das Depend√™ncias
!pip uninstall -y google-genai google-generativeai # Desinstala ambas para evitar conflitos
!pip install -q google-generativeai # Instala a SDK oficial do Gemini
!pip install -q google-adk # Instala o Agent Development Kit

# C√©lula 2: Configura√ß√£o da API Key e Importa√ß√£o Principal
import os
from google.colab import userdata # Importa a biblioteca para acessar dados do usu√°rio
import google.generativeai as genai # Importa a biblioteca principal do Gemini

# Carrega a API Key dos Secrets do Colab.
# MUITO IMPORTANTE: CERTIFIQUE-SE QUE SUA CHAVE EST√Å SALVA NO SECRETS DO COLAB COM O NOME 'GOOGLE_API_KEY_1'
api_key = userdata.get('GOOGLE_API_KEY_1')

# Define a vari√°vel de ambiente GOOGLE_API_KEY.
# A SDK do Gemini (google.generativeai) busca automaticamente a API Key nesta vari√°vel.
os.environ["GOOGLE_API_KEY"] = api_key

# Define o ID do modelo padr√£o a ser usado pelos agentes (o Flash √© gratuito e r√°pido)
MODEL_ID = "gemini-2.0-flash"

# C√©lula 3: Imports do ADK e Fun√ß√µes Auxiliares
from google.adk.agents import Agent # Classe base para definir seus agentes do ADK
from google.adk.runners import Runner # Para executar o fluxo dos agentes
from google.adk.sessions import InMemorySessionService # Para gerenciar sess√µes de conversa
# ATEN√á√ÉO: NENHUM import de Google Search ou GoogleSearchTool do ADK aqui!
from google.genai import types # Para trabalhar com tipos de conte√∫do do Gemini (parte da SDK principal)
from datetime import date # Para obter a data atual
import textwrap # Para formatar texto
from IPython.display import display, Markdown, HTML # Para exibir conte√∫do formatado no Colab
import warnings # Para gerenciar avisos
import json # Para trabalhar com dados JSON (convers√£o entre string e dicion√°rio)

warnings.filterwarnings("ignore") # Ignora avisos, como os de 'DeprecationWarning'

# --- Fun√ß√£o Auxiliar: call_agent ---
# Esta fun√ß√£o √© respons√°vel por "chamar" um agente do ADK e obter sua resposta.
def call_agent(agent: Agent, message_text: str) -> str:
    session_service = InMemorySessionService()
    session = session_service.create_session(app_name=agent.name, user_id="user1", session_id="session1")
    runner = Runner(agent=agent, app_name=agent.name, session_service=session_service)
    content = types.Content(role="user", parts=[types.Part(text=message_text)])

    final_response = ""
    for event in runner.run(user_id="user1", session_id="session1", new_message=content):
        if event.is_final_response():
          for part in event.content.parts:
            if part.text is not None:
              final_response += part.text
    return final_response

# --- Fun√ß√£o Auxiliar: to_markdown ---
# Esta fun√ß√£o formata uma string para ser exibida como Markdown no Colab, melhorando a leitura.
def to_markdown(text):
  text = text.replace('‚Ä¢', '  *') # Substitui marcadores de lista para compatibilidade com Markdown
  return Markdown(textwrap.indent(text, '> ', predicate=lambda _: True)) # Indenta o texto para citar

# C√©lula 4: Defini√ß√£o do Agente 1 (Analisador de Dificuldades)
##########################################
# --- Agente 1: Analisador de Dificuldades --- #
##########################################
# Esta fun√ß√£o APENAS DEFINE e RETORNA um objeto Agent do ADK.
def agente_analisador() -> Agent:
    # O objeto 'Agent' do ADK que encapsula o modelo LLM e a instru√ß√£o espec√≠fica do agente.
    return Agent(
        name="agente_analisador", # Nome do agente para o ADK
        model=MODEL_ID, # Passamos a STRING com o nome do modelo diretamente para o ADK Agent.
        instruction=( # As instru√ß√µes detalhadas para o comportamento do agente
            """
            Voc√™ √© o 'Detetive Curioso' do InMathMate, um professor de matem√°tica com um superpoder: ajudar crian√ßas de 11 anos (6¬∫ ano do Ensino Fundamental) a amar a matem√°tica! Sua miss√£o √© dupla e crucial e sua sa√≠da deve ser APENAS um JSON v√°lido.

            1.  **Mapear o Territ√≥rio da Dificuldade (An√°lise Inicial):**
                * Com base no 't√≥pico de matem√°tica' fornecido e em seu conhecimento de curr√≠culo do 6¬∫ ano, identifique os 3 a 5 conceitos fundamentais (pr√©-requisitos ou sub-t√≥picos) que s√£o a base para entender esse t√≥pico.
                * Formule 2 a 3 perguntas **diretas, mas contextualizadas e amig√°veis**, que o aluno pode responder rapidamente. O objetivo dessas perguntas √© testar o entendimento dos **conceitos base**.
                * **Use a ferramenta `Google Search`** para rapidamente buscar o curr√≠culo de matem√°tica do 6¬∫ ano ou exemplos pr√°ticos do t√≥pico, caso precise de mais contexto para formular suas perguntas diagn√≥sticas.
            2.  **Decifrar o C√≥digo do Aprendizado Personalizado (Valida√ß√£o da Prefer√™ncia):**
                * A 'prefer√™ncia de acessibilidade' foi fornecida. Sua tarefa √© validar e refinar essa prefer√™ncia.
                * **Se a prefer√™ncia for clara** (ex: '√°udio', 'texto simplificado'), use uma frase de confirma√ß√£o entusiasmada no JSON.
                * **Se a prefer√™ncia for 'n√£o sei' ou vaga**, sugira de forma amig√°vel as op√ß√µes principais de aprendizado (texto simples, visual, auditivo/l√∫dico) e pe√ßa para o aluno escolher uma.
                * **Tipos de prefer√™ncia a considerar:** `texto_simples`, `visual`, `auditivo_verbal`, `ludico_emojis`, `passo_a_passos`.
            3.  **Tom de Voz e Linguagem:** Seja o amigo mais legal e paciente! Mantenha sempre um tom encorajador, positivo e de apoio. Use linguagem simples, frases curtas e evite jarg√µes.
                * **Empatia:** Reforce o valor da tentativa e do esfor√ßo em todas as suas mensagens.
            4.  **Formato de Sa√≠da:** Sua resposta DEVE ser APENAS um JSON v√°lido, sem texto adicional antes ou depois.
                * O JSON deve conter: `topico_original`, `perguntas_diagnosticas` (lista de strings), `preferencia_aprendizado_confirmada` (string), `estilo_comunicacao_sugerido` (string), `proximo_passo_para_aluno` (string), `necessita_interacao_adicional` (booleano), `mensagem_para_aluno` (string).
                * **Exemplo de JSON (sem respostas √†s perguntas):**
                ```json
                {
                  "topico_original": "fra√ß√µes",
                  "perguntas_diagnosticas": [
                    "Imagine uma pizza dividida em 4 peda√ßos iguais. Se voc√™ comer 1 peda√ßo, quantos peda√ßos faltam?",
                    "O que √© o n√∫mero de baixo (denominador) em uma fra√ß√£o?"
                  ],
                  "preferencia_aprendizado_confirmada": "prefere explica√ß√µes visuais com desenhos e analogias",
                  "estilo_comunicacao_sugerido": "usar met√°foras de comida e jogos",
                  "proximo_passo_para_aluno": "Responda as perguntinhas para o seu InMathMate!",
                  "necessita_interacao_adicional": true,
                  "mensagem_para_aluno": "Vamos desvendar as fra√ß√µes juntos! üòÑ"
                }
                ```
                * Se n√£o conseguir identificar a dificuldade espec√≠fica nas primeiras perguntas, o agente deve gerar um JSON com `necessita_interacao_adicional: true` e uma `mensagem_para_aluno` que pe√ßa mais clareza.
            """
        ),
        description="Agente que faz o diagn√≥stico inicial da dificuldade e prefer√™ncias de acessibilidade."
    )

# C√©lula 5: Defini√ß√£o do Agente 2 (Explicador Criativo)
############################################
# --- Agente 2: Explicador Criativo --- #
############################################
# Esta fun√ß√£o APENAS DEFINE e RETORNA um objeto Agent do ADK
def agente_explicador() -> Agent:
    return Agent(
        name="agente_explicador",
        model=MODEL_ID, # Passa a string com o nome do modelo
        instruction=(
            """
            Voc√™ √© o 'Professor Brilhante' do InMathMate, um mestre em explicar matem√°tica de um jeito que faz a cabe√ßa das crian√ßas de 11 anos brilhar! Sua miss√£o √© receber um diagn√≥stico de dificuldade e uma prefer√™ncia de aprendizado, e criar a explica√ß√£o perfeita para a crian√ßa. Sua sa√≠da DEVE ser APENAS um JSON v√°lido.

            1.  **Entenda o Diagn√≥stico:** Analise cuidadosamente o JSON de entrada. Extraia o `diagnostico_dificuldade_especifica`, a `preferencia_aprendizado_confirmada` e o `estilo_comunicacao_sugerido`.
                * **Importante:** Se o JSON de entrada estiver mal formatado ou indicar uma `necessita_interacao_adicional`, responda gentilmente que voc√™ precisa de um diagn√≥stico claro antes de explicar, e pe√ßa para o aluno responder √†s perguntas do 'Detetive Curioso' primeiro. N√£o tente explicar um conceito vago.
            2.  **Explique o Conceito:** Foque na `diagnostico_dificuldade_especifica`. Decomponha o conceito em passos pequenos e f√°ceis de digerir.
                * **Adapte a Explica√ß√£o Ativamente (com base na `preferencia_aprendizado_confirmada`):**
                    * Se `texto_simples`: Use frases super curtas, vocabul√°rio b√°sico do 6¬∫ ano, e par√°grafos de uma a duas linhas. Evite qualquer jarg√£o.
                    * Se `visual`: Crie analogias ricas em descri√ß√µes que evocam imagens mentais (ex: 'Imagine uma balan√ßa em equil√≠brio para equa√ß√µes'), sugira que a crian√ßa visualize ou pense em desenhar. Use exemplos com objetos do dia a dia. **Al√©m da explica√ß√£o textual, crie uma descri√ß√£o CONCISA (prompt de 1-2 frases, m√°ximo 80 caracteres) para uma imagem que ilustre o conceito de forma simples e colorida para uma crian√ßa de 11 anos. Esta descri√ß√£o ser√° o valor do campo `sugestao_imagem_prompt` no JSON de sa√≠da.** Exemplo de prompt de imagem: "Ilustra√ß√£o cartoon de uma pizza redonda com 6 fatias iguais, 3 delas em cor azul vibrante e as outras 3 em amarelo suave, mostrando a fra√ß√£o."
                    * Se `auditivo_verbal`: Estruture a explica√ß√£o com clareza e fluidez para ser facilmente compreendida se lida em voz alta por um aplicativo de texto para voz ou por um tutor.
                    * Se `ludico_emojis`: Incorpore emojis relevantes (mas n√£o excessivos) e met√°foras de jogos ou brincadeiras (ex: 'Saber porcentagem √© como ter um superpoder para descobrir descontos!').
                    * Se `passo_a_passos`: Numere cada micro-etapa (1., 2., 3...) e mantenha cada passo extremamente conciso.
            3.  **Tom de Voz e Empatia:** Mantenha um tom super positivo, paciente e encorajador. Mostre entusiasmo pelo aprendizado. Use o `estilo_comunicacao_sugerido` para guiar sua linguagem.
            4.  **Formato de Sa√≠da:** Sua resposta DEVE ser APENAS um JSON v√°lido, sem texto adicional antes ou depois.
                * O JSON deve conter:
                    * `explicacao_texto`: O texto da explica√ß√£o.
                    * `sugestao_imagem_prompt`: (Opcional) A descri√ß√£o para gerar uma imagem (prompt para uma ferramenta de imagem), se a prefer√™ncia for 'visual' ou 'mais exemplos visuais', ou vazio se n√£o for.
                    * `mensagem_transicao_desafios`: Uma frase de transi√ß√£o convidando para os desafios (ex: 'Pronto para um desafio divertido e testar seus novos conhecimentos? üòâ').
            """
        ),
        description="Agente que explica conceitos matem√°ticos de forma adaptada e criativa, e sugere prompts visuais."
    )

# C√©lula 6: Defini√ß√£o do Agente 3 (Gerador de Desafios)
############################################
# --- Agente 3: Gerador de Desafios --- #
############################################
# Esta fun√ß√£o APENAS DEFINE e RETORNA um objeto Agent do ADK
def agente_gerador_desafios() -> Agent:
    return Agent(
        name="agente_gerador_desafios",
        model=MODEL_ID, # Passa a string com o nome do modelo
        instruction=(
            """
            Voc√™ √© o 'Mestre dos Desafios Matem√°ticos' do InMathMate, um craque em criar exerc√≠cios divertidos que ajudam crian√ßas de 11 anos (6¬∫ ano do Ensino Fundamental) a se tornarem g√™nios da matem√°tica! Sua miss√£o √© receber o conceito que o aluno acabou de aprender e transform√°-lo em desafios pr√°ticos e personalizados.

            1.  **Entenda o Contexto:**
                * Analise o JSON 'diagnostico_do_agente_1' para extrair a `preferencia_aprendizado_confirmada` e o `estilo_comunicacao_sugerido`.
                * Use a 'explicacao_do_agente_2' como base para o conceito que precisa ser exercitado. **Se a explica√ß√£o parecer gen√©rica ou n√£o focar em um conceito claro, tente inferir o conceito principal do `topico_original` do Agente 1 e crie exerc√≠cios sobre esse tema mais amplo, adicionando uma observa√ß√£o na 'mensagem_final' sobre a generaliza√ß√£o.**
            2.  **Crie os Desafios:**
                * Gere **1 a 3 exerc√≠cios de matem√°tica**. O ideal √© que sejam 2 exerc√≠cios, mas adapte se o conceito for muito simples (1 exerc√≠cio) ou mais complexo (3 exerc√≠cios).
                * Os exerc√≠cios devem ser **diretamente relacionados ao conceito explicado** e adequados ao n√≠vel do 6¬∫ ano.
                * **Adapte os Exerc√≠cios Ativamente (com base na `preferencia_aprendizado_confirmada`):**
                    * Se `texto_simples`: Enunciados super curtos, linguagem direta, vocabul√°rio b√°sico.
                    * Se `visual`: Enunciados que evocam imagens mentais ou que se prestam a um desenho f√°cil (Ex: "Imagine um bolo..."). Descreva o cen√°rio visualmente.
                    * Se `auditivo_verbal`: Estruture o enunciado para ser claro se lido em voz alta, com frases simples e diretas.
                    * Se `ludico_emojis`: Incorpore met√°foras de jogos, personagens e emojis no enunciado.
                    * Se `passo_a_passos`: Numere cada micro-etapa (1., 2., 3...) e mantenha cada passo extremamente conciso.
                * Garanta que os exerc√≠cios sejam diferentes o suficiente para testar o conceito de v√°rias maneiras, n√£o apenas varia√ß√µes superficiais.
            3.  **Tom de Voz e Empatia:** Mantenha um tom de voz super positivo, de desafio e de aventura. Use o `estilo_comunicacao_sugerido` para guiar sua linguagem. Encoraje a crian√ßa a tentar, mesmo que erre, refor√ßando que o esfor√ßo √© o mais importante.
            4.  **Formato de Sa√≠da:** Sua resposta DEVE ser APENAS um JSON v√°lido, sem texto adicional antes ou depois. Cada exerc√≠cio deve ser um item em uma lista.
                * O JSON deve conter: `titulo_desafios`, `instrucao_geral`, `exercicios` (lista de objetos com `id`, `enunciado`, `formato_sugerido_resposta`), `mensagem_final`.
                * Para `formato_sugerido_resposta`, seja EXTREMAMENTE CLARO e ADAPTADO. Ex: 'Escreva APENAS o n√∫mero final.', 'Descreva o processo que usou e o resultado final.', 'Escolha a op√ß√£o A, B ou C.'
                * **Exemplo de JSON (sem respostas nos exerc√≠cios):**
                ```json
                {
                  "titulo_desafios": "Miss√£o Superprimo: Desvende os Segredos!",
                  "instrucao_geral": "Use seus superpoderes matem√°ticos para identificar os n√∫meros primos em cada desafio. Lembre-se, um n√∫mero primo s√≥ pode ser dividido por 1 e por ele mesmo! Mostre que voc√™ √© um detetive dos n√∫meros!",
                  "exercicios": [
                    {
                      "id": 1,
                      "enunciado": "Na lista a seguir, qual n√∫mero √© primo: 6, 11, ou 15? Escolha o n√∫mero que s√≥ pode ser dividido por 1 e por ele mesmo.",
                      "formato_sugerido_resposta": "Escreva APENAS o n√∫mero primo que voc√™ encontrou."
                    },
                    {
                      "id": 2,
                      "enunciado": "Imagine que voc√™ √© um construtor de torres de blocos. Voc√™ tem 7 blocos. Voc√™ consegue dividir esses 7 blocos em grupos iguais, de forma que cada grupo tenha mais de um bloco?",
                      "formato_sugerido_resposta": "Responda 'Sim' se for poss√≠vel dividir em grupos iguais ou 'N√£o' se n√£o for."
                    }
                  ],
                  "mensagem_final": "Voc√™ √© incr√≠vel! Continue explorando o mundo dos n√∫meros primos."
                }
                ```
            """
        ),
        description="Agente que gera exerc√≠cios de matem√°tica adaptados e motivadores."
    )

# C√©lula 7: Defini√ß√£o do Agente 4 (Corretor e Motivador)
############################################
# --- Agente 4: Corretor e Motivador --- #
############################################
# Esta fun√ß√£o APENAS DEFINE e RETORNA um objeto Agent do ADK
def agente_corretor_motivador() -> Agent:
    return Agent(
        name="agente_corretor_motivador",
        model=MODEL_ID, # Passa a string com o nome do modelo
        instruction=(
            """
            Voc√™ √© o 'Coach Inclusivo e Celebrador' do InMathMate, o maior incentivador de todos! Sua miss√£o √© guiar crian√ßas de 11 anos (6¬∫ ano do Ensino Fundamental) no aprendizado da matem√°tica, transformando cada erro em uma oportunidade de brilhar e cada acerto em uma grande festa! Sua sa√≠da deve ser APENAS um JSON v√°lido.

            1.  **Entenda o Contexto:**
                * Analise o JSON `diagnostico_do_agente_1` para extrair a `preferencia_aprendizado_confirmada` e o `estilo_comunicacao_sugerido`.
                * Analise o JSON `exercicios_do_agente_3` para entender os exerc√≠cios propostos.
                * Analise as `respostas_do_aluno` (que vir√° como um dicion√°rio Python onde as chaves s√£o os IDs dos exerc√≠cios e os valores s√£o as respostas do aluno) para cada exerc√≠cio.
            2.  **Calcule as Solu√ß√µes Corretas:**
                * Para CADA exerc√≠cio em `exercicios_do_agente_3`, voc√™ DEVE primeiro **calcular a solu√ß√£o correta**. Use seus conhecimentos de matem√°tica para o 6¬∫ ano. Se necess√°rio, decomponha o c√°lculo em mini-passos para garantir precis√£o e mostre esses passos na explica√ß√£o da corre√ß√£o.
            3.  **Forne√ßa Feedback Detalhado e Emp√°tico:**
                * Para **cada exerc√≠cio**, compare a `respostas_do_aluno` com a solu√ß√£o que voc√™ calculou.
                * **Se a resposta estiver CORRETA:** Elogie a crian√ßa de forma espec√≠fica e entusiasmada. Diga que ela mandou muito bem e reforce o que ela acertou. (Ex: 'UAU! Voc√™ acertou em cheio! ü•≥')
                * **Se a resposta estiver INCORRETA:**
                    * **NUNCA critique ou diga 'est√° errado'.** Use frases como 'Quase l√°!', 'Vamos dar uma olhadinha juntos?', 'Essa √© uma parte um pouco mais tricky, mas voc√™ consegue!'
                    * Explique o **passo a passo da solu√ß√£o correta** de forma clara e simples, baseando-se no c√°lculo que voc√™ fez. Foque no *processo* de como chegar √† resposta, n√£o apenas na resposta final.
                    * Identifique o **prov√°vel ponto de confus√£o ou tipo de erro** (inferido a partir do erro do aluno e seu conhecimento do t√≥pico) e explique-o de forma gentil.
                    * **Adapte o Feedback Ativamente (com base na `preferencia_aprendizado_confirmada`):**
                        * Se `texto_simples`: Feedback direto e conciso, com frases curtas.
                        * Se `visual`: Use analogias visuais para explicar a corre√ß√£o (ex: "Imagine que o bolo foi cortado assim...").
                        * Se `auditivo_verbal`: Estruture a explica√ß√£o para ser clara se lida em voz alta.
                        * Se `ludico_emojis`: Incorpore emojis e met√°foras de jogos na explica√ß√£o e na motiva√ß√£o.
                        * Se `passo_a_passos`: Numere cada micro-etapa da resolu√ß√£o.
            4.  **Tom de Voz e Motiva√ß√£o Final:**
                * Mantenha um tom geral de **apoio incondicional**. A principal meta √© manter a crian√ßa motivada e com autoestima elevada na matem√°tica.
                * No final do feedback para todos os exerc√≠cios, crie uma **mensagem final inspiradora** que celebre o esfor√ßo, reforce a capacidade de aprendizado e convide a crian√ßa para o pr√≥ximo passo.
            5.  **Formato de Sa√≠da:** Sua resposta DEVE ser APENAS um JSON v√°lido.
                * O JSON deve conter: `titulo_feedback`, `feedbacks_individuais` (lista de objetos com `id_exercicio`, `status`, `mensagem`, `solucao_calculada`, `solucao_passo_a_passo`), `mensagem_final_motivacional`, `sugestao_pedagogica_proximo_passo`.
                * Para `sugestao_pedagogica_proximo_passo`, seja espec√≠fico. Ex: 'Que tal mais um desafio sobre o mesmo tema?', 'Podemos revisar o conceito de soma novamente?', 'Sugira uma pausa para brincar e voltar depois.' (se o aluno errou repetidamente)."
                * **Exemplo de JSON (sem respostas expl√≠citas, focado na estrutura):**
                ```json
                {
                  "titulo_feedback": "Seu Feedback Incr√≠vel!",
                  "feedbacks_individuais": [
                    {
                      "id_exercicio": 1,
                      "status": "correto",
                      "mensagem": "Parab√©ns, voc√™ acertou em cheio!",
                      "solucao_calculada": 10,
                      "solucao_passo_a_passo": []
                    },
                    {
                      "id_exercicio": 2,
                      "status": "incorreto",
                      "mensagem": "Quase l√°! Vamos revisar?",
                      "solucao_calculada": 25,
                      "solucao_passo_a_passo": ["1. Primeiro passo...", "2. Segundo passo..."]
                    }
                  ],
                  "mensagem_final_motivacional": "Sua dedica√ß√£o √© um superpoder!",
                  "sugestao_pedagogica_proximo_passo": "Que tal mais um desafio?"
                }
                ```
            """
        ),
        description="Agente que corrige exerc√≠cios e motiva o aluno de forma inclusiva."
    )

# C√©lula 8: Bloco Principal de Execu√ß√£o do InMathMate
############################################
# --- Fluxo Principal do InMathMate --- #
############################################

from datetime import date
import json

# Obt√©m a data atual (pode ser √∫til para o Agente 1 se ele precisar de contexto de data)
today = date.today()
data_de_hoje = today.strftime("%d/%m/%Y") # Formato dd/mm/AAAA

# --- INICIALIZA√á√ÉO DOS AGENTES ADK ---
# Cria as inst√¢ncias dos objetos Agent do ADK chamando as fun√ß√µes que os definem.
# Estas fun√ß√µes foram definidas nas c√©lulas anteriores (C√©lulas 4, 5, 6, 7).
agente_analisador_obj = agente_analisador()
agente_explicador_obj = agente_explicador()
agente_gerador_desafios_obj = agente_gerador_desafios()
agente_corretor_motivador_obj = agente_corretor_motivador()

print("üìö Ol√°! Bem-vindo(a) ao InMathMate: Seu Amigo de Matem√°tica Acess√≠vel e Emp√°tico com IA! üöÄ")
print("Estou aqui para te ajudar a desvendar os mist√©rios da matem√°tica de um jeito divertido e feito sob medida para voc√™! ‚ú®")

# --- Loop Principal de Intera√ß√£o ---
# O programa continuar√° perguntando por t√≥picos at√© que voc√™ digite 'fim'.
while True:
    # Se√ß√£o para iniciar um novo t√≥pico ou para o primeiro turno
    # Reset das vari√°veis de contexto para cada novo ciclo de t√≥pico/prefer√™ncia
    if 'diagnostico_data' not in locals() or \
       'respostas_diagnosticas_do_aluno' not in locals() or \
       'explicacao_data' not in locals() or \
       'exercicios_data' not in locals() or \
       'reiniciar_assunto' in locals() and reiniciar_assunto: # Reseta se pediu para reiniciar assunto

        topico_matematica = input("\n‚ùì Primeiro, me conta: qual assunto de matem√°tica voc√™ quer aprender hoje (ex: fra√ß√µes, porcentagem, geometria)? Ou digite 'fim' para encerrar. ")

        if topico_matematica.lower() == 'fim':
            print("At√© a pr√≥xima! Foi um prazer aprender com voc√™. Continue praticando e brilhando na matem√°tica! üëã")
            break # Sai do loop

        if not topico_matematica: # Verifica se o usu√°rio digitou algo
            print("Ops! Parece que voc√™ esqueceu de me dizer o assunto. Por favor, digite o t√≥pico ou 'fim' para sair.")
            continue # Volta para o in√≠cio do loop

        pref_acessibilidade = input("üåà Como voc√™ prefere aprender? (Ex: 'texto simples', '√°udio', 'mais exemplos visuais', 'com emojis', 'passo a passo', ou 'n√£o sei, me ajude a descobrir!'): ")

        if not pref_acessibilidade: # Verifica se o usu√°rio digitou algo para a prefer√™ncia
            print("Ah, entendi! √â importante saber como voc√™ aprende melhor. Por favor, digite sua prefer√™ncia ou 'n√£o sei' para eu te ajudar.")
            continue # Volta para o in√≠cio do loop

        print(f"\nMaravilha! Vamos desvendar os segredos de '{topico_matematica}' de um jeito que funcione perfeitamente para voc√™. Preparar o InMathMate! üí°")
        print("------------------------------------------")

        # --- AGENTE 1: ANALISADOR DE DIFICULDADES (O Diagn√≥stico Inclusivo) ---
        print("\n--- Agente 1: O Detetive Curioso est√° investigando suas necessidades... ---\n")
        prompt_analisador_input = (
            f"T√≥pico da matem√°tica: {topico_matematica}\n"
            f"Minha prefer√™ncia de aprendizado/acessibilidade √©: {pref_acessibilidade}\n\n"
            "Com base nisso, me fa√ßa perguntas para entender minha dificuldade e confirme como devo receber as explica√ß√µes. "
            "Formate a sa√≠da como um JSON."
        )
        diagnostico_e_preferencia_raw_str = call_agent(agente_analisador_obj, prompt_analisador_input)

        diagnostico_e_preferencia_json_str = ""
        if '```json' in diagnostico_e_preferencia_raw_str:
            start_index = diagnostico_e_preferencia_raw_str.find('```json') + len('```json')
            end_index = diagnostico_e_preferencia_raw_str.rfind('```')
            if start_index != -1 and end_index != -1 and end_index > start_index:
                diagnostico_e_preferencia_json_str = diagnostico_e_preferencia_raw_str[start_index:end_index].strip()
            else:
                diagnostico_e_preferencia_json_str = diagnostico_e_preferencia_raw_str.strip()
        else:
            diagnostico_e_preferencia_json_str = diagnostico_e_preferencia_raw_str.strip()

        try:
            diagnostico_data = json.loads(diagnostico_e_preferencia_json_str)
            print("üîç O Detetive Curioso encontrou algumas pistas:\n")
            print(f"   Assunto Principal: {diagnostico_data.get('topico_original', 'N/A')}")

            respostas_diagnosticas_do_aluno = []
            if diagnostico_data.get('perguntas_diagnosticas'):
                 print("\n   Vamos tentar desvendar isso com algumas perguntas r√°pidas:")
                 for i, pergunta in enumerate(diagnostico_data['perguntas_diagnosticas']):
                     print(f"   {i+1}. {pergunta}")
                     resposta_aluno = input(f"   Sua resposta para a pergunta {i+1}: ")
                     respostas_diagnosticas_do_aluno.append(f"Pergunta {i+1}: {pergunta}\nResposta: {resposta_aluno}")
                 print(f"\n   {diagnostico_data.get('proximo_passo_para_aluno', 'Responda para o InMathMate!')}")

            print(f"\n   Seu estilo de aprendizado confirmado √©: {diagnostico_data.get('preferencia_aprendizado_confirmada', 'N/A')} üòä")
            print(f"   {diagnostico_data.get('mensagem_para_aluno', 'Estou aqui para ajudar!')}")

        except json.JSONDecodeError as e:
            print("Ops! O Detetive Curioso est√° um pouco confuso e n√£o conseguiu formatar o diagn√≥stico. Tente novamente!")
            print(f"Erro de decodifica√ß√£o JSON: {e}")
            print(f"String JSON tentada para decodifica√ß√£o: '{diagnostico_e_preferencia_json_str}'")
            print(f"Resposta bruta original do Agente 1: '{diagnostico_e_preferencia_raw_str}'")
            continue

        print("\n------------------------------------------")

    # --- AGENTE 2: EXPLICADOR CRIATIVO ---
    print("\n--- Agente 2: O Professor Brilhante est√° preparando a explica√ß√£o! ---\n")
    prompt_explicador_input = (
        f"Com base no seguinte JSON de diagn√≥stico: {json.dumps(diagnostico_data)}\n"
        f"Nas respostas do aluno para as perguntas diagn√≥sticas: {' | '.join(respostas_diagnosticas_do_aluno)}\n"
        f"Crie uma explica√ß√£o de matem√°tica para uma crian√ßa de 11 anos."
    )
    explicacao_conceito_raw_str = call_agent(agente_explicador_obj, prompt_explicador_input)

    explicacao_conceito_json_str = ""
    if '```json' in explicacao_conceito_raw_str:
        start_index = explicacao_conceito_raw_str.find('```json') + len('```json')
        end_index = explicacao_conceito_raw_str.rfind('```')
        if start_index != -1 and end_index != -1 and end_index > start_index:
            explicacao_conceito_json_str = explicacao_conceito_raw_str[start_index:end_index].strip()
        else:
            explicacao_conceito_json_str = explicacao_conceito_raw_str.strip()
    else:
        explicacao_conceito_json_str = explicacao_conceito_raw_str.strip()

    try:
        explicacao_data = json.loads(explicacao_conceito_json_str)
        print("‚ú® Hora de aprender de um jeito incr√≠vel! ‚ú®\n")
        display(to_markdown(explicacao_data.get('explicacao_texto', '')))

        sugestao_imagem = explicacao_data.get('sugestao_imagem_prompt', '')
        if sugestao_imagem:
            print("\nüñºÔ∏è **Seu InMathMate geraria a seguinte imagem para ajudar a entender!**")
            print(f"   (Use esta descri√ß√£o para gerar a imagem em uma ferramenta como o Google Gemini/AI Studio):")
            display(to_markdown(sugestao_imagem))
            print("   (Lembre-se de que a gera√ß√£o de imagem aqui √© uma sugest√£o para voc√™ experimentar fora do Colab!)")

        print(f"\n{explicacao_data.get('mensagem_transicao_desafios', 'Vamos para os desafios?')}")

    except json.JSONDecodeError as e:
        print("Ops! O Professor Brilhante est√° um pouco confuso e n√£o conseguiu formatar a explica√ß√£o. Tente novamente!")
        print(f"Erro de decodifica√ß√£o JSON (Agente 2): {e}")
        print(f"String JSON tentada para decodifica√ß√£o: '{explicacao_conceito_json_str}'")
        print(f"Resposta bruta original do Agente 2: '{explicacao_conceito_raw_str}'")
        continue

    print("\n------------------------------------------")


    # --- AGENTE 3: GERADOR DE DESAFIOS ---
    print("\n--- Agente 3: O Mestre dos Desafios Matem√°ticos est√° preparando seus desafios! ---\n")
    prompt_gerador_input = (
        f"Com base no diagn√≥stico: {json.dumps(diagnostico_data)}\n"
        f"E na explica√ß√£o: {explicacao_data.get('explicacao_texto', '')}\n"
        f"Crie desafios de matem√°tica para uma crian√ßa de 11 anos. Formate a sa√≠da como um JSON."
    )
    exercicios_json_raw_str = call_agent(agente_gerador_desafios_obj, prompt_gerador_input)

    exercicios_json_str = ""
    if '```json' in exercicios_json_raw_str:
        start_index = exercicios_json_raw_str.find('```json') + len('```json')
        end_index = exercicios_json_raw_str.rfind('```')
        if start_index != -1 and end_index != -1 and end_index > start_index:
            exercicios_json_str = exercicios_json_raw_str[start_index:end_index].strip()
        else:
            exercicios_json_str = exercicios_json_raw_str.strip()
    else:
        exercicios_json_str = exercicios_json_raw_str.strip()

    try:
        exercicios_data = json.loads(exercicios_json_str)
        print(f"\n{exercicios_data.get('titulo_desafios', 'Desafios de Matem√°tica')}")
        print(f"{exercicios_data.get('instrucao_geral', 'Vamos nessa!')}\n")

        respostas_do_aluno = {}
        for exercicio in exercicios_data.get('exercicios', []):
            print(f"Desafio {exercicio.get('id', 'N/A')}: {exercicio.get('enunciado', 'Problema.')}")
            resposta = input(f"   -> Sua resposta ({exercicio.get('formato_sugerido_resposta', 'Digite aqui')}): ")
            respostas_do_aluno[exercicio.get('id')] = resposta
            print("")

        print(f"{exercicios_data.get('mensagem_final', 'Mandou bem!')}")

    except json.JSONDecodeError as e:
        print("Ops! O Mestre dos Desafios n√£o conseguiu apresentar os desafios agora. Tente de novo! üòî")
        print(f"Erro ao processar desafios (JSON Decode Error): {e}")
        print(f"String JSON tentada para decodifica√ß√£o: '{exercicios_json_str}'")
        print(f"Resposta bruta original do Agente 3: '{exercicios_json_raw_str}'")
        continue

    except Exception as e: # Captura outros erros (ex: se exercicios_data n√£o for um dict)
        print("Ops! O Mestre dos Desafios n√£o conseguiu apresentar os desafios agora. Tente de novo! üòî")
        print(f"Erro ao processar desafios: {e}")
        print(f"Resposta bruta do Agente 3: '{exercicios_json_raw_str}'")
        continue

    print("\n------------------------------------------")

    # --- AGENTE 4: CORRETOR E MOTIVADOR ---
    print("\n--- Agente 4: O Coach Inclusivo est√° corrigindo e te motivando! ---\n")
    prompt_corretor_input = (
        f"Com base no diagn√≥stico: {json.dumps(diagnostico_data)}\n"
        f"Nos exerc√≠cios: {json.dumps(exercicios_data)}\n"
        f"E nas respostas do aluno: {json.dumps(respostas_do_aluno)},\n"
        f"Forne√ßa um feedback detalhado e motivacional. Formate a sa√≠da como um JSON."
    )
    feedback_json_raw_str = call_agent(agente_corretor_motivador_obj, prompt_corretor_input)

    feedback_json_str = ""
    if '```json' in feedback_json_raw_str:
        start_index = feedback_json_raw_str.find('```json') + len('```json')
        end_index = feedback_json_raw_str.rfind('```')
        if start_index != -1 and end_index != -1 and end_index > start_index:
            feedback_json_str = feedback_json_raw_str[start_index:end_index].strip()
        else:
            feedback_json_str = feedback_json_raw_str.strip()
    else:
        feedback_json_str = feedback_json_raw_str.strip()

    try:
        feedback_data = json.loads(feedback_json_str)
        print(f"\n{feedback_data.get('titulo_feedback', 'Seu feedback do InMathMate!')}\n")

        for feedback_individual in feedback_data.get('feedbacks_individuais', []):
            print(f"Desafio {feedback_individual.get('id_exercicio', 'N/A')}: Status: {feedback_individual.get('status', 'N/A')}")
            display(to_markdown(feedback_individual.get('mensagem', '')))
            solucao_passo_a_passo_content = feedback_individual.get('solucao_passo_a_passo', '')
            if solucao_passo_a_passo_content:
                print("   Passo a passo da solu√ß√£o:")
                if isinstance(solucao_passo_a_passo_content, list):
                    display(to_markdown('\n'.join(solucao_passo_a_passo_content)))
                else:
                    display(to_markdown(solucao_passo_a_passo_content))
            print("")

        print(f"{feedback_data.get('mensagem_final_motivacional', 'Continue assim!')}")
        print(f"Dica do Coach: {feedback_data.get('sugestao_pedagogica_proximo_passo', 'Sua jornada continua!')}")

    except Exception as e:
        print("Ops! O Coach Inclusivo est√° com problemas para dar o feedback agora. Mas n√£o desista, voc√™ √© incr√≠vel! üí™")
        print(f"Erro ao processar feedback: {e}")
        print(f"Resposta bruta do Agente 4: {feedback_json_raw_str}")
        continue

    print("\n------------------------------------------")

    # --- L√ìGICA DE CONTINUIDADE DO DI√ÅLOGO ---
    print("\n--- O InMathMate te d√° a palavra! ---")
    escolha_aluno = input(
        "O que voc√™ gostaria de fazer agora?\n"
        "1. Quero mais desafios sobre o mesmo assunto! (Ex: N√∫meros Primos)\n"
        "2. Quero revisar o conceito de [T√≥pico Atual, ex: N√∫meros Primos] de um jeito diferente.\n" # AQUI!
        "3. Vamos aprender um novo assunto!\n"
        "4. J√° aprendi muito por hoje! Quero encerrar.\n"
        "Digite o n√∫mero da sua escolha: "
    )

    # L√≥gica para processar a escolha do aluno
    if escolha_aluno == '1': # Mais desafios sobre o mesmo assunto
        # Para continuar no mesmo assunto sem reiniciar o loop completo:
        # Apenas permite que o loop continue para a pr√≥xima itera√ß√£o,
        # mas *n√£o* reseta o t√≥pico e prefer√™ncia.
        # Precisar√≠amos de uma l√≥gica mais complexa para pular o in√≠cio do loop.

        # Para o desafio de hoje, o mais pr√°tico para simular:
        # Apenas re-executamos a parte do Agente 3 (desafios).
        # Isso significa que o Agente 1 e 2 ser√£o 'pulados' nessa itera√ß√£o.

        # O Agente 3 precisa do diagnostico_data e explicacao_data.
        # Essas vari√°veis j√° est√£o no escopo do loop.
        # A maneira mais simples de pular a primeira parte do loop para a pr√≥xima itera√ß√£o
        # √© usar uma vari√°vel de estado.

        # Vamos definir a vari√°vel 'reiniciar_assunto' para false
        # para que o pr√≥ximo loop n√£o pe√ßa o t√≥pico e prefer√™ncia de novo.
        reiniciar_assunto = False
        print("\nüöÄ √ìtimo! Preparando mais desafios para voc√™ se tornar um craque! üöÄ")
        # O loop vai para a pr√≥xima itera√ß√£o e cair√° na parte de gerar desafios.
        pass # Apenas permite que o loop continue

    elif escolha_aluno == '2': # Revisar o conceito
        reiniciar_assunto = False # N√£o reinicia o assunto, mas volta para a explica√ß√£o
        print("\nüìö Vamos revisar o conceito de um jeito diferente! Fique ligado(a)! üìö")
        # Aqui, poder√≠amos for√ßar o Agente 2 a gerar uma nova explica√ß√£o
        # do mesmo t√≥pico.

        # Para o desafio: o loop vai para a pr√≥xima itera√ß√£o.
        # Podemos usar uma flag para pular para o Agente 2 ou apenas a mensagem
        # do Agente 4 j√° deu essa sensa√ß√£o.
        pass

    elif escolha_aluno == '3': # Novo assunto
        reiniciar_assunto = True # Sinaliza para o pr√≥ximo loop pedir um novo t√≥pico e prefer√™ncia
        print("\nüéâ Que legal! Vamos explorar um novo assunto em matem√°tica! üéâ")
        # As vari√°veis de contexto ser√£o resetadas no in√≠cio do pr√≥ximo loop.
        pass

    elif escolha_aluno == '4': # Encerrar
        print("\nAt√© a pr√≥xima! Foi um prazer aprender com voc√™. Continue praticando e brilhando na matem√°tica! üëã")
        break # Sai do loop principal

    else: # Op√ß√£o inv√°lida
        print("\nOp√ß√£o inv√°lida. Por favor, digite um n√∫mero de 1 a 4.")
        reiniciar_assunto = False # Mant√©m o contexto para tentar novamente